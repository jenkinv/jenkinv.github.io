<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coding Life]]></title>
  <link href="http://zhanjinwu.cn/atom.xml" rel="self"/>
  <link href="http://zhanjinwu.cn/"/>
  <updated>2014-01-18T00:15:58+08:00</updated>
  <id>http://zhanjinwu.cn/</id>
  <author>
    <name><![CDATA[Jinwu Zhan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git-merge 手册页]]></title>
    <link href="http://zhanjinwu.cn/blog/2014/01/17/git-merge-shou-ce-ye/"/>
    <updated>2014-01-17T23:57:26+08:00</updated>
    <id>http://zhanjinwu.cn/blog/2014/01/17/git-merge-shou-ce-ye</id>
    <content type="html"><![CDATA[<h4>名字</h4>

<p><code>git-merge</code> &ndash; 合并两个或多个提交历史</p>

<h4>语法</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git merge [-n][--stat][--no-commit][--squash][--[no-]edit]
</span><span class='line'>      [-s &lt;strategy&gt;][-X &lt;strategy-option&gt;]
</span><span class='line'>git merge &lt;msg&gt; HEAD &lt;commit&gt; ...
</span><span class='line'>git merge --abort</span></code></pre></td></tr></table></div></figure>


<h4>描述</h4>

<p>把指定提交的改动记录（指上次从当前分支分离后发生的所有改动）并入当前分支。这个命令被<code>git pull</code>用来合并另外一个版本库的改动，也可以被用来手工合并一个分支的改动到另外一个分支。</p>

<p>假设存在以下历史提交记录并且当前所在分支是<code>master</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   A---B---C topic
</span><span class='line'>   /
</span><span class='line'>D---E---F---G master</span></code></pre></td></tr></table></div></figure>


<p>执行<code>git merge topic</code>将把<code>topic</code>分支自从<code>master</code>分离（例如：<code>E</code>）直到当前最新提交（例如：<code>C</code>）的所有改动重放到<code>master</code>，然后生成新的提交并记录它的两个父提交的名字和用户描述的日志信息。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   A---B---C topic
</span><span class='line'>   /         \
</span><span class='line'>D---E---F---G---H master</span></code></pre></td></tr></table></div></figure>


<pre><code>第二种语法（`&lt;msg&gt; HEAD &lt;commit&gt; ...`）因为历史原因而存在。不要在命令行或者新的脚本代码中使用它。它等价于`git merge -m &lt;msg&gt; &lt;commit&gt; ....`
</code></pre>

<p>第三种语法（<code>git merge --abort</code>）只能在合并产生冲突之后使用。它会终止合并，并且恢复暂存区和目录文件到合并之前的状态。然而，当合并开始时有未提交的改动（特别是那些合并过程中被进一步修改的改动），<code>git merge --abort</code>将在某种程度上无法恢复到合并之前的状态。基于这一点： <br>
<strong>警告：</strong>不推荐在包含未提交改动的版本库中执行<code>git merge</code>，这样做有可能让你在合并产生冲突后无法回退。</p>

<h4>选项</h4>

<p><code>--commit</code>
<code>--no-commit</code></p>

<blockquote><p>执行合并，然后提交结果。<code>--commit</code>可以用来覆盖<code>--no-commit</code>。<br/>
<code>--no-commit</code>执行合并，但假设合并失败，不做自动合并，给用户合并前继续修改的机会。</p></blockquote>

<p><code>--edit</code>
<code>--no-edit</code></p>

<blockquote><p>在提交自动合并之前打开一个编辑器，让你有机会编辑已经自动生成的日志，比如解释合并的理由。<code>--no-edit</code>选项可以被用来接受自动生成的日志（通常不建议这么干）。如果你之前在命令行通过<code>-m</code>选项已经提供了一条草稿日志，<code>--edit</code>依然有用，可以让你进一步编辑。<br/>
老的脚本由于历史原因可能会不允许用户编辑合并日志。用户运行<code>git merge</code>然后看不到编辑器被打开(译者注：原文可能笔误，说可以打开编辑器，这样的话应该就和上面一致了就不需要纠正了)。为了纠正这种行为，可以设置环境变量<code>GIT_MERGE_AUTOEDIT</code>为<code>no</code>。</p></blockquote>

<p><code>--ff</code></p>

<blockquote><p>当合并被认定为可以进行快进，仅仅更新分支的指针，而不再创建一次合并提交。这是默认行为。</p></blockquote>

<p><code>--no-ff</code></p>

<blockquote><p>当合并被认定为可以进行快进，仍然创建一次合并提交。</p></blockquote>

<p><code>--ff-only</code></p>

<blockquote><p>只允许快进式合并或者已经合并完成，否则将会拒绝合并以失败的结果退出。</p></blockquote>

<p><code>--log[=&lt;n&gt;]</code>
<code>--no-log</code></p>

<blockquote><p>计算日志时，除了那些分支名字以外，还包括来自实际合并的最多<n>次提交的单行描述。参见<code>git-fmt-merge-msg(1)</code><br/>
<code>--no-log</code>不会列出来自实际合并的提交的单行描述。</p></blockquote>

<p><code>--stat</code><br/>
<code>-n</code><br/>
<code>--no-stat</code></p>

<blockquote><p>在合并结束时显示diff统计。配置项<code>merge.stat</code>也可以用来控制这个统计。<br/>
<code>--no-stat</code>或者<code>-n</code>将不会输出diff统计。</p></blockquote>

<p><code>-squash</code>
<code>--no-squash</code></p>

<blockquote><p>像真实合并一样修改工作区和暂存区的状态（不记录合并信息），但不做实际提交，不移动<code>HEAD</code>指针，也不记录能让下一次<code>git commit</code>指令创建合并提交的<code>$GIT_DIR/MERGE_HEAD</code>。它允许你在当前分支的基础上创建一次独立的提交，效果和</p></blockquote>

<p><code>-s &lt;strategy&gt;</code>
<code>--strategy=&lt;strategy&gt;</code></p>

<p><code>-X &lt;option&gt;</code>
<code>--strategy-option=&lt;option&gt;</code></p>

<p><code>--summary</code>
<code>--no-summary</code></p>

<p><code>-q</code>
<code>--quiet</code></p>

<p><code>-v</code>
<code>--verbose</code>
<code>--progress</code>
<code>--no-progress</code></p>

<p><code>-m &lt;msg&gt;</code></p>

<p><code>--rerere-autoupdate</code>
<code>--no-rerere-autoupdate</code></p>

<p><code>--abort</code></p>

<p><code>&lt;commit&gt;...</code></p>

<h4>预合并</h4>

<p>在合并别人的提交之前，你应该整理好你手头上的工作并且提交到本地仓库，这样不至于在合并冲突时丢失一些文件改动。参见<code>git-stash</code>。如果本地有未提交的改动并且这些改动和将要被<code>git pull/git merge</code>更新的改动有重合，<code>git pull</code>和<code>git merge</code>指令就会停止执行。</p>

<p>为了避免在合并时记录下无关的改动，如果暂存区中有任何相对于版本库的改动，<code>git pull</code>和<code>git merge</code>将会中止执行。（有一种例外情况是这样的：暂存区中改动的文件和合并生成的文件是完全一样的。）</p>

<p>如果所有指定的提交已然是<code>HEAD</code>的祖先，<code>git merge</code>将会给出提示“Already up-to-date”并退出。</p>

<h4>快进式合并</h4>

<p>当前分支头常常是指定提交的祖先。这是最普遍的场景特别是被<code>git pull</code>触发的时候：你在追踪上游版本库，没有本地提交，现在你想更新到最新的上游版本。这种情况下，没必要生成一个新的提交以记录这次合并的历史。取而代之的是，<code>HEAD</code>指针被修改指向到指定提交（同时更新的还有暂存区），并不生成额外的合并提交记录。</p>

<p>这种快进式行为可以被这个参数选项禁用：<code>--no-ff</code>。</p>

<h4>真实合并</h4>

<p>除了快进式合并（参见上面），被合并的分支必须被一个新的合并记录粘合到一起，这个新的合并记录把当前分支和被合并的分支列为父记录。</p>

<p>生成的合并版本融合了所有分支提交的改动，你的版本库的头指针，暂存区及工作区会被更新到这个版本。工作区中有可能有文件修改未提交，这些未提交的修改可以一直保留直到和上游的改动有重合。</p>

<p>如果不能明确地融合这些改动，将会执行这些步骤：</p>

<blockquote><ol>
<li><code>HEAD</code>指针保持不变</li>
<li><code>MERGE_HEAD</code>指针指向另外一个分支头</li>
<li>更新成功合并的文件到暂存区和工作目录</li>
<li>对于冲突的文件，暂存区记录最多三个版本：1记录共同祖先的版本；2记录<code>HEAD</code>的版本；3记录<code>MERGE_HEAD</code>的版本（你可以用这个指令<code>git ls-files -u</code>审查这些版本）。工作区则记录下“merge”程序执行的结果：例如，三方合并执行的结果是增加了熟悉的冲突标记<code>&lt;&lt;&lt;===&gt;&gt;&gt;</code>。（译者注：此处merge非git-merge）</li>
<li>其它不做改动。合并之前的本地修改将会保留，与之对应的暂存区中的文件也和合并之前保持一致。</li>
</ol>
</blockquote>

<p>如果你尝试的合并导致了一个复杂的冲突结果而想重新开始，你可以通过<code>git merge --abort</code>来恢复。</p>

<h4>冲突是怎么呈现的</h4>

<p>在合并过程中，工作区文件会被更新以用来反映合并结果。在相对于共同祖先的改动之中，非重叠部分（比如，你修改了文件的一部分，而另一边未修改这部分，诸如此类）会被逐字地组合在一起。然而当两边修改了同一部分，git不能随机选择其中一边而放弃另一边，它会给你留下两边的改动让你来解决。</p>

<p>默认情况下，git会使用和RCS套件中的&#8217;merge&#8217;(译者注：RCS是另一款版本管理工具，<a href="http://www.idi.ntnu.no/~systprog/rcs/">http://www.idi.ntnu.no/~systprog/rcs/</a>) 程序相同的风格来呈现冲突内容，像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Here</span> <span class="n">are</span> <span class="n">lines</span> <span class="n">that</span> <span class="n">are</span> <span class="n">either</span> <span class="n">unchanged</span> <span class="n">from</span> <span class="n">the</span> <span class="n">common</span>
</span><span class='line'><span class="n">ancestor</span><span class="p">,</span> <span class="n">or</span> <span class="n">cleanly</span> <span class="n">resolved</span> <span class="n">because</span> <span class="n">only</span> <span class="n">one</span> <span class="n">side</span> <span class="n">changed</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="n">yours</span><span class="o">:</span><span class="n">sample</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">Conflict</span> <span class="n">resolution</span> <span class="n">is</span> <span class="n">hard</span><span class="p">;</span>
</span><span class='line'><span class="n">let</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">go</span> <span class="n">shopping</span><span class="p">.</span>
</span><span class='line'><span class="o">=======</span>
</span><span class='line'><span class="n">Git</span> <span class="n">makes</span> <span class="n">conflict</span> <span class="n">resolution</span> <span class="n">easy</span><span class="p">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="n">theirs</span><span class="o">:</span><span class="n">sample</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">And</span> <span class="n">here</span> <span class="n">is</span> <span class="n">another</span> <span class="n">line</span> <span class="n">that</span> <span class="n">is</span> <span class="n">cleanly</span> <span class="n">resolved</span> <span class="n">or</span> <span class="n">unmodified</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>冲突区域被<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>,<code>=======</code>和<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出来。<code>=======</code>之前的部分是你的修改，之后的部分是其它人的修改。</p>

<p>默认的格式没有显示出原始文件中冲突区域的内容。你不能判断出有多少行被其它人删除/替换。你仅仅知道你这边改成了什么，其它人那边改成了什么。</p>

<p>可以选择在配置中设置<code>merge.conflictstyle</code>变量的值为<code>diff3</code>，这样上面的冲突会变成这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Here</span> <span class="n">are</span> <span class="n">lines</span> <span class="n">that</span> <span class="n">are</span> <span class="n">either</span> <span class="n">unchanged</span> <span class="n">from</span> <span class="n">the</span> <span class="n">common</span>
</span><span class='line'><span class="n">ancestor</span><span class="p">,</span> <span class="n">or</span> <span class="n">cleanly</span> <span class="n">resolved</span> <span class="n">because</span> <span class="n">only</span> <span class="n">one</span> <span class="n">side</span> <span class="n">changed</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class="n">yours</span><span class="o">:</span><span class="n">sample</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">Conflict</span> <span class="n">resolution</span> <span class="n">is</span> <span class="n">hard</span><span class="p">;</span>
</span><span class='line'><span class="n">let</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">go</span> <span class="n">shopping</span><span class="p">.</span>
</span><span class='line'><span class="o">|||||||</span>
</span><span class='line'><span class="n">Conflict</span> <span class="n">resolution</span> <span class="n">is</span> <span class="n">hard</span><span class="p">.</span>
</span><span class='line'><span class="o">=======</span>
</span><span class='line'><span class="n">Git</span> <span class="n">makes</span> <span class="n">conflict</span> <span class="n">resolution</span> <span class="n">easy</span><span class="p">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class="n">theirs</span><span class="o">:</span><span class="n">sample</span><span class="p">.</span><span class="n">txt</span>
</span><span class='line'><span class="n">And</span> <span class="n">here</span> <span class="n">is</span> <span class="n">another</span> <span class="n">line</span> <span class="n">that</span> <span class="n">is</span> <span class="n">cleanly</span> <span class="n">resolved</span> <span class="n">or</span> <span class="n">unmodified</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>,<code>=======</code>和<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记外，这个指令使用了<code>|||||||</code>标记，后面跟着的是原始内容。你可以分辨原始内容，你的改动及其它人的改动。有时根据原始内容能更好地解决冲突。</p>

<h4>怎么解决冲突</h4>

<p>当冲突出现时，你可以采取以下两种手段：</p>

<ul>
<li>暂时不合并。你需要做的清理工作是重置暂存区文件到<code>HEAD</code>指向的文件状态，以撤消合并时做的第2步，然后撤消工作区第2步和第3步的改动（译者注：原文档可能笔误，这里的第2步应该指合并时的第3步<code>更新成功合并的文件到暂存区和工作目录</code>，这里的第3步应该指的合并时的第4步）；<code>git merge --abort</code>适用这种场景，用来撤消合并。</li>
<li>解决冲突。Git会在工作区中标记冲突，编辑冲突的文件然后使用<code>git add</code>把它们加入暂存区，最后使用<code>git commit</code>来完成合并。</li>
</ul>


<p>你还可以借助以下一些工具来解决冲突：</p>

<ul>
<li>使用一款合并工具：<code>git mergetool</code>将会打开图形合并工具</li>
<li>查看改动：<code>git diff</code>将会展示三方改动，并高亮显示来自<code>HEAD</code>和<code>MERGE_HEAD</code>的改动</li>
<li>查看各个分支的改动：<code>git log --merge -p &lt;path&gt;</code>将会先展示来自<code>HEAD</code>的改动，然后展示来自<code>MERGE_HEAD</code>的改动</li>
<li>查看原始文件：<code>git show :1:filename</code>显示共同祖先的原始文件；<code>git show :2:filename</code>显示<code>HEAD</code>原始文件；<code>git show :3:filename</code>显示<code>MERGE_HEAD</code>原始文件</li>
</ul>


<h4>示例</h4>

<ul>
<li>合并<code>fixes</code>和<code>enhancements</code>到当前分支，来一次多方合并：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="n">fixes</span> <span class="n">enhancements</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>合并<code>obsolete</code>到当前分支，使用<code>ours</code>合并策略：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="o">-</span><span class="n">s</span> <span class="n">ours</span> <span class="n">obsolete</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>合并<code>maint</code>到当前分支，但不做自动提交：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">git</span> <span class="n">merge</span> <span class="o">--</span><span class="n">no</span><span class="o">-</span><span class="n">commit</span> <span class="n">maint</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>当你想进一步对合并做改动，或者只是想自己写合并提交日志时，你可以使用这种方法。
不要滥用这个选项去暗地里做一些重要改动而提交到这次合并中来。小的修补例如修改发布号或版本号是可以接受的。</p></blockquote>

<h4>合并策略</h4>

<p>合并时（<code>git-merge</code>和<code>git-pull</code>）可以使用<code>-s</code>选项来选择底层的<code>merge strategies</code>（译者注：合并策略）。有一些合并策略也会有自己的选项，你可以使用<code>-X&lt;options&gt;</code>参数传递选项给<code>git-merge</code>或<code>git-pull</code>。</p>

<p><code>resolve</code></p>

<blockquote><p>这种策略仅能使用三方合并算法处理两个头指针的情况（例如，当前分支和你想要拉下来的分支）。它尝试检查十字交叉合并（译者注：十字交叉合并可以简单地理解为有两个不同的共同祖先，参见：<a href="http://www.gelato.unsw.edu.au/archives/git/0504/2279.html#replies">The criss-cross merge case</a>）歧义，通常被认为是快捷安全的。</p></blockquote>

<p><code>recursive</code></p>

<blockquote><p>这种策略仅能使用三方合并算法处理两个头指针的情况。当存在不只一个共同祖先可以被用作三方合并时，这种策略生成共同祖先的合并树，并且拿它作为三方合并的参考（译者注：相当于生成了虚拟的提交，然后作为三方合并的base）。这种策略在Linux 2.6内核开发历史的实际操作中被印证可生成更少的冲突并且可避免遗漏。另外，这种策略可以正确处理合并引起的重命名。这是拉一个上游分支和合并一个分支的默认策略。</p>

<p><code>recursive</code>策略支持以下选项：</p>

<p><code>ours</code></p>

<blockquote><p>这个选项强制自动解决冲突块，优先选择<code>our</code>版本。另一分支树上的改动如果没有和当前分支冲突，那么这些改动就会被保留下来。如果是二进制文件，直接使用当前分支版本。<br/>
不要把这个选项和<code>ours</code>合并策略搞混淆了，<code>ours</code>合并策略根本不会去查看其它分支树上的改动。<code>ours</code>合并策略会遗弃其它分支树的改动并声称自己的历史已经包含了那些改动。</p></blockquote>

<p><code>theirs</code></p>

<blockquote><p>这个选项和<code>ours</code>相反</p></blockquote>

<p><code>patience</code></p>

<blockquote><p>加上这个选项，<code>merge-recursive</code>会花一点点额外的时间来避免遗漏，这些遗漏有时发生在不重要的行匹配上（比如，不同函数的花括号）。当要合并的分支已经分离很久时，可以使用这个选项。参见<code>git-diff(1) --patience</code>。</p></blockquote>

<p><code>ignore-space-change</code><br/>
<code>ignore-all-space</code><br/>
<code>ignore-space-at-eol</code></p>

<blockquote><p>在三方合并时忽略上述类型的行内空白的修改。一行中混合了空白字符及其它修改将不会被忽略。参见：<code>git-diff(1) -b -w --ignore-space-at-eol</code>。</p>

<ul>
<li><p>如果一行中<code>their</code>版本仅仅引入空白修改，将采用<code>our</code>版本</p></li>
<li><p>如果一行中<code>our</code>版本仅仅引入空白修改，而<code>their</code>版本不仅仅只有空白修改，将采用<code>their</code>版本</p></li>
<li><p>否则，将进行正常合并</p></li>
</ul>
</blockquote>

<p><code>renormalize</code></p>

<blockquote><p>这个选项在三方合并时对文件的三个状态（译者注：base,our,their）执行虚拟的签入签出。这意味着可以用来合并包含不同的清理过滤器和不同的文件结束符规则的分支。详细请参见<code>gitattributes(5)</code>中的“合并包含不同签入/签出属性的分支”</p></blockquote>

<p><code>no-renormalize</code></p>

<blockquote><p>禁用<code>renormalize</code>选项。这个选项也会覆盖<code>merge.renormalize</code>配置项。</p></blockquote>

<p><code>rename-threshold=&lt;n&gt;</code></p>

<blockquote><p>控制重命名检测中的的相似度阈值。参见<code>git-diff(1) -M</code></p></blockquote>

<p><code>subtree[=&lt;path&gt;]</code></p>

<blockquote><p>这个选项是<code>subtree</code>策略的高级形式，<code>subtree</code>策略会在合并过程中猜测着去移动两棵树以让它们互相匹配。与之不同的是，这个选项可以指定一个路径前缀来让两棵树匹配。</p></blockquote></blockquote>

<p>octopus</p>

<blockquote><p>这种策略适用多于两个分支合并的场景，不允许手工解决复杂的冲突。这主要意味着可以用来绑定多个特性分支。它是拉多个上游分支或合并多个分支的默认策略。</p></blockquote>

<p>ours</p>

<blockquote><p>这种策略可以解决任意数量的分支合并，但合并的结果树永远是当前分支树，也就是会忽略所有来自其它分支的改动。这意味着当前分支可以用来取代旧的旁支历史分支。注意了，这种策略和<code>recursive</code>策略的<code>-Xours</code>选项是有区别的。</p></blockquote>

<p>subtree</p>

<blockquote><p>这是调整过的<code>recursive</code>策略。当合并A树和B树时，如果B树对应A树的子树，那么B树会先和A树的子树结构进行匹配而不是直接和A树匹配。这种子树匹配调整同样适用于共同祖先树。</p></blockquote>

<h4>配置项</h4>

<h4>参考</h4>

<p><code>git-fmt-merge-msg(1)</code>,<code>git-pull(1)</code>,<code>gitattributes(5)</code>,<code>git-reset(1)</code>,<code>git-diff(1)</code>,<code>git-ls-files(1)</code>,<code>git-add(1)</code>,<code>git-rm(1)</code>,<code>git-mergetool(1)</code></p>

<h4>GIT</h4>

<p><code>git</code>指令的一部分。</p>

<blockquote><p>Written with <a href="http://benweet.github.io/stackedit/">StackEdit</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog]]></title>
    <link href="http://zhanjinwu.cn/blog/2014/01/17/my-first-blog/"/>
    <updated>2014-01-17T23:54:25+08:00</updated>
    <id>http://zhanjinwu.cn/blog/2014/01/17/my-first-blog</id>
    <content type="html"><![CDATA[<p><a href="http://zhanjinwu.cn">http://zhanjinwu.cn</a></p>
]]></content>
  </entry>
  
</feed>
